{"version":3,"sources":["App.js","index.js"],"names":["m","require","timerActive","dataModel","sensors","relays","sendState","Object","keys","length","setTimeout","console","log","fetch","postJSON","error","result","App","useState","relayState","setRelayState","sensorState","setSensorState","useEffect","getJSON","sensorLiftState","singleSensorState","index","relayLiftState","singleRelayState","SingleSensor","props","name","isEnabled","setSingleSensorState","id","handleChange","event","value","target","type","checked","Fragment","className","style","onChange","Form","Check","label","SingleRelay","mode","onSetpoint","setpoint","sensorChannel","setSingleRelayState","Label","sensorChannels","map","key","Control","as","placeholder","Spinner","animation","variant","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2vCAGIA,GADOC,EAAQ,KACXA,EAAQ,MAEZC,GAAc,EAEdC,EAAY,CACdC,QAAS,GACTC,OAAQ,IAGNC,EAAY,WAEVJ,GAA0D,IAA1CK,OAAOC,KAAKL,EAAUC,SAASK,QAA0D,IAAxCF,OAAOC,KAAKL,EAAUE,QAAQI,SACjGP,GAAc,EACdQ,YAAW,WACTC,QAAQC,IAAI,iBACZZ,EAAEa,MAAMC,SAAS,eAAgBX,GAAW,SAASY,EAAOC,OAI5Dd,GAAc,IACb,OA6NQe,MAzNf,WAAe,MAEyBC,mBAAS,MAFlC,mBAELC,EAFK,KAEOC,EAFP,OAG2BF,mBAAS,MAHpC,mBAGLG,EAHK,KAGQC,EAHR,KAqBbC,qBARc,WACZvB,EAAEa,MAAMW,QAAQ,aAAa,SAAST,EAAOC,GACvCD,IACFK,EAAcJ,EAAOX,QACrBiB,EAAeN,EAAOZ,eAIT,IAEnB,IAAIqB,EAAkB,SAASC,EAAmBC,GAChDxB,EAAUC,QAAQuB,GAASD,EAC3BpB,KAGEsB,EAAiB,SAASC,EAAkBF,GAC9CxB,EAAUE,OAAOsB,GAASE,EAC1BvB,KAGEwB,EAAe,SAASC,GAAO,IAAD,EACoBb,mBAAS,CAACc,KAAMD,EAAMC,KAAMC,UAAWF,EAAME,YADjE,mBACxBP,EADwB,KACLQ,EADK,KAEhCX,qBAAU,WACRQ,EAAMN,gBAAgBC,EAAmBK,EAAMI,OAGjD,IAAIC,EAAe,SAASC,GAC1B,IAAMC,EAA8B,aAAtBD,EAAME,OAAOC,KAAsBH,EAAME,OAAOE,QAAUJ,EAAME,OAAOD,MAE5D,aAAtBD,EAAME,OAAOC,KACdN,EAAqB,2BAChBR,GADe,IAElBO,UAAWK,KAGbJ,EAAqB,2BAChBR,GADe,IAElBM,KAAMM,MAMZ,OACE,cAAC,IAAMI,SAAP,UACE,sBAAKC,UAAU,eAAf,UACE,oBAAGC,MAAO,CAAC,QAAW,UAAWD,UAAU,KAA3C,4BAAiEZ,EAAMI,MADzE,iBAEgB,uBAAOQ,UAAU,eAAeH,KAAK,OAAOK,SAAUT,EAAcE,MAAQZ,EAAkBM,OAC5G,cAACc,EAAA,EAAKC,MAAN,CACEN,QAASf,EAAkBO,UAC3BY,SAAUT,EACVQ,MAAO,CAAC,QAAU,UAClBJ,KAAM,WACNL,GAAK,YAAYJ,EAAMI,GACvBa,MAAO,YAET,6BAMJC,EAAc,SAASlB,GAAO,IAAD,EACkBb,mBAAS,CACxD,KAAQa,EAAMC,KACd,KAAQD,EAAMmB,KACd,WAAcnB,EAAMoB,WACpB,SAAYpB,EAAMqB,SAClB,cAAiBrB,EAAMsB,gBANM,mBACvBxB,EADuB,KACLyB,EADK,KAS/B/B,qBAAU,WACRQ,EAAMH,eAAeC,EAAkBE,EAAMI,OAG/C,IAAIC,EAAe,SAASC,GAC1B,IAAIC,EAAQD,EAAME,OAAOD,MACzB,GAAyB,eAAtBD,EAAME,OAAOC,KACd,OAAQH,EAAME,OAAOP,MACnB,IAAK,cACHsB,EAAoB,2BACfzB,GADc,IAEjBwB,cAAef,KAEjB,MACF,IAAK,WACHgB,EAAoB,2BACfzB,GADc,IAEjBsB,WAAYb,KAEd,MACF,IAAK,OACHgB,EAAoB,2BACfzB,GADc,IAEjBqB,KAAMZ,UAKZ,OAAOD,EAAME,OAAOP,MAClB,IAAK,OACHsB,EAAoB,2BACfzB,GADc,IAEjBG,KAAMM,KAER,MACF,IAAK,WACHgB,EAAoB,2BACfzB,GADc,IAEjBuB,SAAUd,OAOpB,OACE,cAAC,IAAMI,SAAP,UACE,sBAAKC,UAAU,cAAf,UACE,oBAAGC,MAAO,CAAC,QAAW,UAAWD,UAAU,KAA3C,2BAAgEZ,EAAMI,MACtE,eAACW,EAAA,EAAKS,MAAN,2BAEA,uBAAOZ,UAAU,eAAeH,KAAK,OAAOR,KAAK,OAAOM,MAAOT,EAAiBG,KAAMa,SAAUT,OAJlG,QAOE,yBAAQO,UAAU,eAAeL,MAAOT,EAAiBqB,KAAMlB,KAAK,OAAOa,SAAUT,EAArF,UACE,wBAAQE,MAAM,OAAd,kBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,oBAVJ,wCAcE,wBAAQK,UAAU,eAAeL,MAAOT,EAAiBwB,cAAerB,KAAK,cAAca,SAAUT,EAArG,SACG7B,OAAOC,KAAKuB,EAAMyB,gBAAgBC,KAAI,SAASC,GAC9C,OACE,wBAAQpB,MAAOoB,EAAf,SAA+B,WAAIA,EAAJ,MAAa3B,EAAMyB,eAAeE,GAAK1B,MAA7C0B,QAK/B,eAACZ,EAAA,EAAKS,MAAN,gBACA,eAACT,EAAA,EAAKa,QAAN,CAAcrB,MAAOT,EAAiBsB,WAAYS,GAAG,SAAS5B,KAAK,WAAWa,SAAUT,EAAxF,UACE,yBAAQE,MAAO,IAAf,cAAsB,IAAtB,OACA,yBAAQA,MAAO,IAAf,cAAsB,IAAtB,aAzBJ,OA6BE,uBAAOK,UAAU,eAAeX,KAAK,WAAWQ,KAAK,SAASqB,YAAY,QAAQvB,MAAOT,EAAiBuB,SAAUP,SAAUT,IAC9H,6BAMR,OAjKqB,OAAfjB,GAAyC,OAAhBE,EAmK3B,mCACA,cAACyC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,cAKpC,sBAAKrB,UAAU,MAAf,UACE,kDACA,yCAEA,gDACA,qBAAKA,UAAU,mBAAf,SACIpC,OAAOC,KAAKW,GAAasC,KAAI,SAASC,EAAKpB,GAC3C,OACE,cAACW,EAAD,CAEEd,GAAMuB,EACN1B,KAAQb,EAAWuC,GAAK1B,KACxBkB,KAAQ/B,EAAWuC,GAAKR,KACxBC,WAAchC,EAAWuC,GAAKP,WAC9BC,SAAYjC,EAAWuC,GAAKN,SAC5BC,cAAiBlC,EAAWuC,GAAKL,cACjCG,eAAkBnC,EAClBO,eAAkBA,GARZ,SAAS8B,QAcvB,iDACA,qBAAKf,UAAU,oBAAf,SACIpC,OAAOC,KAAKa,GAAcoC,KAAI,SAASC,EAAKpB,GAC5C,OACE,cAACR,EAAD,CACEE,KAAQX,EAAYqC,GAAK1B,KACzBC,UAAaZ,EAAYqC,GAAKzB,UAE9BE,GAAMuB,EACNjC,gBAAmBA,GAFZ,QAAQiC,Y,OCjO/BO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2bcdb25.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Spinner, Form } from 'react-bootstrap';\nvar data = require('./data');\nvar m = require('@milescwatson/m');\n\nvar timerActive = false;\n\nvar dataModel = {\n  sensors: {},\n  relays: {}\n};\n\nvar sendState = function(){\n  // if timer already active, do not activate again\n  if(!timerActive && (Object.keys(dataModel.sensors).length !== 0) && (Object.keys(dataModel.relays).length !==0)) {\n    timerActive = true;\n    setTimeout(function () {\n      console.log('batch sending');\n      m.fetch.postJSON('/update-data', dataModel, function(error, result){\n        if(!error){\n        }\n      })\n      timerActive = false;\n    }, 3000);\n  }\n}\n\nfunction App() {\n  // const [ dataState, setDataState ] = useState(null)\n  const [ relayState, setRelayState ] = useState(null)\n  const [ sensorState, setSensorState ] = useState(null)\n\n  function isReady(){\n    if((relayState === null) || (sensorState === null)){\n      return false;\n    }else{\n      return true;\n    }\n  }\n\n  var getData = function(){\n    m.fetch.getJSON('/get-data', function(error, result){\n      if(!error){\n        setRelayState(result.relays)\n        setSensorState(result.sensors)\n      }\n    });\n  }\n  useEffect(getData, [])\n\n  var sensorLiftState = function(singleSensorState, index){\n    dataModel.sensors[index] = singleSensorState;\n    sendState();\n  }\n\n  var relayLiftState = function(singleRelayState, index){\n    dataModel.relays[index] = singleRelayState;\n    sendState();\n  }\n\n  var SingleSensor = function(props){\n    const [ singleSensorState, setSingleSensorState ] = useState({name: props.name, isEnabled: props.isEnabled});\n    useEffect(()=>{\n      props.sensorLiftState(singleSensorState, props.id)\n    })\n\n    var handleChange = function(event){\n      const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n\n      if(event.target.type === 'checkbox'){\n        setSingleSensorState({\n          ...singleSensorState,\n          isEnabled: value\n        })\n      }else{\n        setSingleSensorState({\n          ...singleSensorState,\n          name: value\n        })\n      }\n\n    }\n\n    return(\n      <React.Fragment>\n        <div className=\"singleSensor\">\n          <p style={{\"display\": \"inline\"}} className=\"h4\" >Sensor Channel {props.id}</p>\n          Channel Name: <input className=\"form-control\" type=\"text\" onChange={handleChange} value={ singleSensorState.name } />\n          <Form.Check\n            checked={singleSensorState.isEnabled}\n            onChange={handleChange}\n            style={{'display':'inline'}}\n            type= 'checkbox'\n            id= {'isEnabled'+props.id}\n            label={'Enabled'}\n          />\n          <br />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  var SingleRelay = function(props){\n    const [ singleRelayState, setSingleRelayState] = useState({\n      \"name\": props.name,\n      \"mode\": props.mode,\n      \"onSetpoint\": props.onSetpoint,\n      \"setpoint\": props.setpoint,\n      \"sensorChannel\": props.sensorChannel\n    });\n\n    useEffect(()=>{\n      props.relayLiftState(singleRelayState, props.id)\n    })\n\n    var handleChange = function(event){\n      var value = event.target.value;\n      if(event.target.type === 'select-one'){\n        switch (event.target.name) {\n          case 'assocSensor':\n            setSingleRelayState({\n              ...singleRelayState,\n              sensorChannel: value\n            })\n            break;\n          case 'operator':\n            setSingleRelayState({\n              ...singleRelayState,\n              onSetpoint: value\n            })\n            break;\n          case 'mode':\n            setSingleRelayState({\n              ...singleRelayState,\n              mode: value\n            })\n            break;\n        }\n      }else{\n        switch(event.target.name){\n          case 'name':\n            setSingleRelayState({\n              ...singleRelayState,\n              name: value\n            })\n            break;\n          case 'setpoint':\n            setSingleRelayState({\n              ...singleRelayState,\n              setpoint: value\n            })\n            break;\n        }\n      }\n    }\n\n    return(\n      <React.Fragment>\n        <div className=\"singleRelay\">\n          <p style={{\"display\": \"inline\"}} className=\"h4\" >Relay Channel {props.id}</p>\n          <Form.Label>\n          Channel Name:\n          <input className=\"form-control\" type=\"text\" name=\"name\" value={singleRelayState.name} onChange={handleChange}/>\n          </Form.Label>\n          Mode:\n          <select className=\"form-control\" value={singleRelayState.mode} name=\"mode\" onChange={handleChange}>\n            <option value=\"auto\">Auto</option>\n            <option value=\"on\">On</option>\n            <option value=\"off\">Off</option>\n          </select>\n\n          Positive value if the value of sensor\n          <select className=\"form-control\" value={singleRelayState.sensorChannel} name=\"assocSensor\" onChange={handleChange}>\n            {Object.keys(props.sensorChannels).map(function(key){\n              return(\n                <option value={key} key={key}>{`(${key}) ` +props.sensorChannels[key].name}</option>\n              )\n            })}\n          </select>\n\n          <Form.Label>Is\n          <Form.Control value={singleRelayState.onSetpoint} as=\"select\" name=\"operator\" onChange={handleChange}>\n            <option value={\">\"}> {\">\"} </option>\n            <option value={\"<\"}> {\"<\"} </option>\n          </Form.Control>\n          </Form.Label>\n          than\n          <input className=\"form-control\" name=\"setpoint\" type=\"number\" placeholder=\"value\" value={singleRelayState.setpoint} onChange={handleChange} />\n          <br />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  if(!isReady()){\n    return(\n      <>\n      <Spinner animation=\"border\" variant=\"success\" />\n      </>\n    )\n  } else {\n    return (\n      <div className=\"App\">\n        <h1>Kombucha Control</h1>\n        <h4>brew-01</h4>\n\n        <h2>Relay Controls</h2>\n        <div className='relays-container'>\n          {(Object.keys(relayState)).map(function(key, value){\n            return(\n              <SingleRelay\n                key= {'relay_'+key}\n                id = {key}\n                name = {relayState[key].name}\n                mode = {relayState[key].mode}\n                onSetpoint = {relayState[key].onSetpoint}\n                setpoint = {relayState[key].setpoint}\n                sensorChannel = {relayState[key].sensorChannel}\n                sensorChannels = {sensorState}\n                relayLiftState = {relayLiftState}\n              />\n            )\n          })}\n        </div>\n\n        <h2>Sensor Controls</h2>\n        <div className='sensors-container'>\n          {(Object.keys(sensorState)).map(function(key, value){\n            return(\n              <SingleSensor\n                name = {sensorState[key].name}\n                isEnabled = {sensorState[key].isEnabled}\n                key = {'sens_'+key}\n                id = {key}\n                sensorLiftState = {sensorLiftState}\n              />\n            )\n          })}\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}